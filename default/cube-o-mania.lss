
cube-o-mania.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00004212  000042a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004212  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000026f  00800102  00800102  000042a8  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  000042a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001a4  00000000  00000000  00004308  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000866  00000000  00000000  000044ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000332  00000000  00000000  00004d12  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000810  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00005854  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001b2  00000000  00000000  00005914  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007b  00000000  00000000  00005ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00005b41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 27 1e 	jmp	0x3c4e	; 0x3c4e <__ctors_end>
       4:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__bad_interrupt>
       8:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__bad_interrupt>
       c:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__bad_interrupt>
      10:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__bad_interrupt>
      14:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__bad_interrupt>
      18:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__bad_interrupt>
      1c:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__bad_interrupt>
      20:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__bad_interrupt>
      24:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__bad_interrupt>
      28:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__bad_interrupt>
      2c:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__bad_interrupt>
      30:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__bad_interrupt>
      34:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__bad_interrupt>
      38:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__bad_interrupt>
      3c:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__bad_interrupt>
      40:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__bad_interrupt>
      44:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__bad_interrupt>
      48:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__bad_interrupt>
      4c:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__bad_interrupt>
      50:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__bad_interrupt>
      54:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__bad_interrupt>
      58:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__bad_interrupt>
      5c:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__bad_interrupt>
      60:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__bad_interrupt>
      64:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__bad_interrupt>
      68:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__bad_interrupt>
      6c:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__bad_interrupt>

00000070 <AnimationA>:
      70:	05 00 00 0f 00 00 00 00 00 00 00 0f 00 00 00 00     ................
      80:	00 00 0f 00 0f 00 00 00 00 00 00 00 00 0f 00 00     ................
      90:	00 0f 00 00 00 00 0f 00 00 00 00 00 00 00 00 00     ................
      a0:	0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     130:	00 00 05 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     140:	00 0f 00 00 0f 00 00 00 00 00 00 00 00 00 00 00     ................
     150:	00 00 00 0f 00 00 0f 00 00 00 00 00 00 00 00 00     ................
	...
     170:	0f 00 00 0f 00 0f 00 00 0f 0f 0f 0f 00 00 00 00     ................
	...
     194:	00 0f 00 00 00 0f 00 00 00 00 00 00 00 0f 00 00     ................
     1a4:	00 0f 00 00 00 00 00 00 00 0f 00 00 00 0f 00 00     ................
     1b4:	00 00 00 00 00 0f 00 00 00 0f 00 00 00 00 00 00     ................
     1c4:	0f 0f 0f 0f 00 0f 00 00 0f 0f 0f 0f 0f 00 0f 00     ................
     1d4:	00 00 00 00 00 0f 00 00 00 00 0f 00 00 00 00 00     ................
     1e4:	00 0f 00 0f 0f 0f 0f 0f 00 00 0f 00 0f 0f 0f 0f     ................
     1f4:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     204:	00 00 00 00 00 0f 00 00 0f 00 00 0f 00 00 0f 00     ................
	...
     23c:	00 00 0f 00 00 0f 00 0f 00 00 0f 0f 0f 0f 00 00     ................
	...
     254:	00 00 0f 00 00 00 00 0f 0f 0f 0f 00 00 00 0f 00     ................
     264:	00 00 00 0f 0f 0f 0f 00 00 00 0f 00 00 00 00 0f     ................
     274:	0f 0f 0f 00 00 00 0f 00 00 00 00 0f 0f 0f 0f 00     ................
     284:	00 00 00 0f 00 00 00 00 00 00 00 00 0f 00 00 00     ................
     294:	00 00 0f 00 00 0f 00 00 00 00 00 00 00 00 0f 00     ................
     2a4:	00 0f 00 00 00 00 00 0f 00 00 00 00 00 00 00 00     ................
     2b4:	0f 00 05 00 0f 00 00 00 00 00 00 00 00 00 0f 00     ................
     2c4:	00 00 00 0f 00 00 00 0f 00 00 00 00 00 00 00 00     ................
     2d4:	0f 00 0f 00 00 00 00 00 00 0f 00 00 00 00 00 00     ................
     2e4:	00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     30c:	0f 00 00 0f 00 0f 00 00 0f 0f 0f 0f 0f 00 00 00     ................
     31c:	00 0f 0f 0f 0f 00 0f 00 0f 00 00 00 00 0f 0f 0f     ................
     32c:	0f 00 0f 00 0f 00 00 00 00 0f 0f 0f 0f 00 0f 00     ................
     33c:	0f 00 00 00 00 0f 0f 0f 0f 00 0f 00 00 0f 00 00     ................
	...
     358:	0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0f     ................
	...
     374:	00 00 0f 00 05 00 00 00 00 00 00 00 00 0f 00 00     ................
	...
     38c:	00 0f 00 00 00 00 00 00 00 00 0f 00 00 00 00 00     ................
     39c:	00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00     ................
	...
     3b4:	00 00 0f 00 00 0f 00 0f 00 00 0f 0f 0f 0f 00 00     ................
	...
     3d8:	00 00 00 0f 00 00 00 0f 00 00 00 00 00 00 00 0f     ................
     3e8:	00 00 00 0f 00 00 00 00 00 00 00 0f 00 00 00 0f     ................
     3f8:	00 00 00 00 00 00 00 0f 00 00 00 0f 00 00 00 00     ................
     408:	00 00 0f 0f 0f 0f 00 0f 00 00 0f 0f 0f 0f 0f 00     ................
     418:	0f 00 00 00 00 00 00 0f 00 00 00 00 0f 00 00 00     ................
     428:	00 00 00 0f 00 0f 0f 0f 0f 0f 00 00 0f 00 0f 0f     ................
     438:	0f 0f 05 00 00 00 00 00 0f 00 00 00 00 00 00 00     ................
     448:	00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00     ................
     458:	00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 0f     ................
	...
     484:	0f 00 00 0f 00 0f 00 00 0f 0f 0f 0f 00 00 00 00     ................
	...
     49c:	0f 00 00 00 00 0f 0f 0f 0f 00 00 00 0f 00 00 00     ................
     4ac:	00 0f 0f 0f 0f 00 00 00 0f 00 00 00 00 0f 0f 0f     ................
     4bc:	0f 00 00 00 0f 00 00 00 00 0f 0f 0f 0f 00 00 00     ................
     4cc:	00 0f 00 00 00 00 00 00 00 00 0f 00 00 00 00 00     ................
     4dc:	0f 00 00 0f 00 00 00 00 00 00 00 00 0f 00 00 0f     ................
     4ec:	00 00 00 00 00 0f 00 00 00 00 00 00 00 00 0f 00     ................
     4fc:	05 00 00 0f 00 00 00 00 00 00 00 00 00 0f 00 00     ................
     50c:	00 00 0f 00 00 00 0f 00 00 00 00 00 00 00 00 0f     ................
     51c:	00 0f 00 00 00 00 00 00 0f 00 00 00 00 00 00 00     ................
     52c:	0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     5bc:	00 00 05 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     5cc:	00 0f 00 00 0f 00 00 00 00 00 00 00 00 00 00 00     ................
     5dc:	00 00 00 0f 00 00 0f 00 00 00 00 00 00 00 00 00     ................
	...
     5fc:	0f 00 00 0f 00 0f 00 00 0f 0f 0f 0f 00 00 00 00     ................
	...
     620:	00 0f 00 00 00 0f 00 00 00 00 00 00 00 0f 00 00     ................
     630:	00 0f 00 00 00 00 00 00 00 0f 00 00 00 0f 00 00     ................
     640:	00 00 00 00 00 0f 00 00 00 0f 00 00 00 00 00 00     ................
     650:	0f 0f 0f 0f 00 0f 00 00 0f 0f 0f 0f 0f 00 0f 00     ................
     660:	00 00 00 00 00 0f 00 00 00 00 0f 00 00 00 00 00     ................
     670:	00 0f 00 0f 0f 0f 0f 0f 00 00 0f 00 0f 0f 0f 0f     ................
     680:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     690:	00 00 00 00 00 0f 00 00 0f 00 00 0f 00 00 0f 00     ................
	...
     6c8:	00 00 0f 00 00 0f 00 0f 00 00 0f 0f 0f 0f 00 00     ................
	...
     6e0:	00 00 0f 00 00 00 00 0f 0f 0f 0f 00 00 00 0f 00     ................
     6f0:	00 00 00 0f 0f 0f 0f 00 00 00 0f 00 00 00 00 0f     ................
     700:	0f 0f 0f 00 00 00 0f 00 00 00 00 0f 0f 0f 0f 00     ................
     710:	00 00 00 0f 00 00 00 00 00 00 00 00 0f 00 00 00     ................
     720:	00 00 0f 00 00 0f 00 00 00 00 00 00 00 00 0f 00     ................
     730:	00 0f 00 00 00 00 00 0f 00 00 00 00 00 00 00 00     ................
     740:	0f 00 05 00 00 00 0f 00 00 00 00 00 00 00 0f 00     ................
     750:	00 00 00 00 00 0f 00 0f 00 00 00 00 00 00 00 00     ................
     760:	0f 00 00 00 0f 00 00 00 00 0f 00 00 00 00 00 00     ................
     770:	00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     798:	0f 00 00 0f 00 0f 00 00 0f 0f 0f 0f 0f 00 00 00     ................
     7a8:	00 0f 0f 0f 0f 00 0f 00 0f 00 00 00 00 0f 0f 0f     ................
     7b8:	0f 00 0f 00 0f 00 00 00 00 0f 0f 0f 0f 00 0f 00     ................
     7c8:	0f 00 00 00 00 0f 0f 0f 0f 00 0f 00 00 0f 00 00     ................
	...
     7e4:	0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0f     ................
	...
     800:	00 00 0f 00 05 00 00 00 00 00 00 00 00 0f 00 00     ................
	...
     818:	00 0f 00 00 00 00 00 00 00 00 0f 00 00 00 00 00     ................
     828:	00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00     ................
	...
     840:	00 00 0f 00 00 0f 00 0f 00 00 0f 0f 0f 0f 00 00     ................
	...
     864:	00 00 00 0f 00 00 00 0f 00 00 00 00 00 00 00 0f     ................
     874:	00 00 00 0f 00 00 00 00 00 00 00 0f 00 00 00 0f     ................
     884:	00 00 00 00 00 00 00 0f 00 00 00 0f 00 00 00 00     ................
     894:	00 00 0f 0f 0f 0f 00 0f 00 00 0f 0f 0f 0f 0f 00     ................
     8a4:	0f 00 00 00 00 00 00 0f 00 00 00 00 0f 00 00 00     ................
     8b4:	00 00 00 0f 00 0f 0f 0f 0f 0f 00 00 0f 00 0f 0f     ................
     8c4:	0f 0f 05 00 00 00 00 00 0f 00 00 00 00 00 00 00     ................
     8d4:	00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00     ................
     8e4:	00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 0f     ................
	...
     910:	0f 00 00 0f 00 0f 00 00 0f 0f 0f 0f 00 00 00 00     ................
	...
     928:	0f 00 00 00 00 0f 0f 0f 0f 00 00 00 0f 00 00 00     ................
     938:	00 0f 0f 0f 0f 00 00 00 0f 00 00 00 00 0f 0f 0f     ................
     948:	0f 00 00 00 0f 00 00 00 00 0f 0f 0f 0f 00 00 00     ................
     958:	00 0f 00 00 00 00 00 00 00 00 0f 00 00 00 00 00     ................
     968:	0f 00 00 0f 00 00 00 00 00 00 00 00 0f 00 00 0f     ................
     978:	00 00 00 00 00 0f 00 00 00 00 00 00 00 00 0f 00     ................
     988:	05 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00     ................
     998:	00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     9a8:	00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     9b8:	0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     a48:	00 00 05 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     a58:	00 0f 00 00 0f 00 00 00 00 00 00 00 00 00 00 00     ................
     a68:	00 00 00 0f 00 00 0f 00 00 00 00 00 00 00 00 00     ................
	...
     a88:	0f 00 00 0f 00 0f 00 00 0f 0f 0f 0f 00 00 00 00     ................
	...
     aac:	00 0f 00 00 00 0f 00 00 00 00 00 00 00 0f 00 00     ................
     abc:	00 0f 00 00 00 00 00 00 00 0f 00 00 00 0f 00 00     ................
     acc:	00 00 00 00 00 0f 00 00 00 0f 00 00 00 00 00 00     ................
     adc:	0f 0f 0f 0f 00 0f 00 00 0f 0f 0f 0f 0f 00 0f 00     ................
     aec:	00 00 00 00 00 0f 00 00 00 00 0f 00 00 00 00 00     ................
     afc:	00 0f 00 0f 0f 0f 0f 0f 00 00 0f 00 0f 0f 0f 0f     ................
     b0c:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     b1c:	00 00 00 00 00 0f 00 00 0f 00 00 0f 00 00 0f 00     ................
	...
     b54:	00 00 0f 00 00 0f 00 0f 00 00 0f 0f 0f 0f 00 00     ................
	...
     b6c:	00 00 0f 00 00 00 00 0f 0f 0f 0f 00 00 00 0f 00     ................
     b7c:	00 00 00 0f 0f 0f 0f 00 00 00 0f 00 00 00 00 0f     ................
     b8c:	0f 0f 0f 00 00 00 0f 00 00 00 00 0f 0f 0f 0f 00     ................
     b9c:	00 00 00 0f 00 00 00 00 00 00 00 00 0f 00 00 00     ................
     bac:	00 00 0f 00 00 0f 00 00 00 00 00 00 00 00 0f 00     ................
     bbc:	00 0f 00 00 00 00 00 0f 00 00 00 00 00 00 00 00     ................
     bcc:	0f 00 05 00 00 00 00 00 00 00 00 00 00 00 0f 00     ................
     bdc:	00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00     ................
     bec:	0f 00 00 00 00 00 00 00 00 0f 00 00 00 00 00 00     ................
	...
     c24:	0f 00 00 0f 00 0f 00 00 0f 0f 0f 0f 0f 00 00 00     ................
     c34:	00 0f 0f 0f 0f 00 0f 00 0f 00 00 00 00 0f 0f 0f     ................
     c44:	0f 00 0f 00 0f 00 00 00 00 0f 0f 0f 0f 00 0f 00     ................
     c54:	0f 00 00 00 00 0f 0f 0f 0f 00 0f 00 00 0f 00 00     ................
	...
     c70:	0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0f     ................
	...
     c8c:	00 00 0f 00 05 00 00 00 00 00 00 00 00 0f 00 00     ................
	...
     ca4:	00 0f 00 00 00 00 00 00 00 00 0f 00 00 00 00 00     ................
     cb4:	00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00     ................
	...
     ccc:	00 00 0f 00 00 0f 00 0f 00 00 0f 0f 0f 0f 00 00     ................
	...
     cf0:	00 00 00 0f 00 00 00 0f 00 00 00 00 00 00 00 0f     ................
     d00:	00 00 00 0f 00 00 00 00 00 00 00 0f 00 00 00 0f     ................
     d10:	00 00 00 00 00 00 00 0f 00 00 00 0f 00 00 00 00     ................
     d20:	00 00 0f 0f 0f 0f 00 0f 00 00 0f 0f 0f 0f 0f 00     ................
     d30:	0f 00 00 00 00 00 00 0f 00 00 00 00 0f 00 00 00     ................
     d40:	00 00 00 0f 00 0f 0f 0f 0f 0f 00 00 0f 00 0f 0f     ................
     d50:	0f 0f 05 00 00 00 00 00 0f 00 00 00 00 00 00 00     ................
     d60:	00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00     ................
     d70:	00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 0f     ................
	...
     d9c:	0f 00 00 0f 00 0f 00 00 0f 0f 0f 0f 00 00 00 00     ................
	...
     db4:	0f 00 00 00 00 0f 0f 0f 0f 00 00 00 0f 00 00 00     ................
     dc4:	00 0f 0f 0f 0f 00 00 00 0f 00 00 00 00 0f 0f 0f     ................
     dd4:	0f 00 00 00 0f 00 00 00 00 0f 0f 0f 0f 00 00 00     ................
     de4:	00 0f 00 00 00 00 00 00 00 00 0f 00 00 00 00 00     ................
     df4:	0f 00 00 0f 00 00 00 00 00 00 00 00 0f 00 00 0f     ................
     e04:	00 00 00 00 00 0f 00 00 00 00 00 00 00 00 0f 00     ................
     e14:	05 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00     ................
     e24:	00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     e34:	00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     e44:	0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     ed4:	00 00 05 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     ee4:	00 0f 00 00 0f 00 00 00 00 00 00 00 00 00 00 00     ................
     ef4:	00 00 00 0f 00 00 0f 00 00 00 00 00 00 00 00 00     ................
	...
     f98:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     fa8:	00 00 00 00 00 0f 00 00 0f 00 00 0f 00 00 0f 00     ................
	...
    1058:	00 00 05 00 00 00 00 00 00 00 00 00 00 00 0f 00     ................
    1068:	00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00     ................
    1078:	0f 00 00 00 00 00 00 00 00 0f 00 00 00 00 00 00     ................
	...
    111c:	05 00 00 00 00 00 00 00 00 0f 00 00 00 00 00 00     ................
    112c:	00 00 00 00 00 0f 00 00 00 00 00 00 00 00 0f 00     ................
	...
    1144:	00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    11dc:	00 00 05 00 00 00 00 00 0f 00 00 00 00 00 00 00     ................
    11ec:	00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00     ................
    11fc:	00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 0f     ................
	...
    12a0:	05 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1360:	00 00 05 00 00 00 00 00 0f 00 00 00 00 00 00 00     ................
	...
    1424:	05 00 00 00 00 00 00 00 00 0f 00 00 00 00 00 00     ................
	...
    14e4:	00 00 05 00 00 00 00 00 00 00 00 00 00 00 0f 00     ................
	...
    15a8:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    15b8:	00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1668:	00 00 05 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1678:	00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00     ................
	...
    172c:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1744:	0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    17ec:	00 00 05 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1808:	00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    18b0:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    18cc:	00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1970:	00 00 05 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1990:	00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1a34:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1a58:	0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1af4:	00 00 05 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b1c:	00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1bb8:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1be0:	00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1c78:	00 00 05 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ca4:	00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d3c:	32 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     2...............
	...
    1d6c:	0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1dfc:	00 00 05 00 00 0f 00 00 00 00 00 00 00 00 00 00     ................
    1e0c:	00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00     ................
    1e1c:	00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1e2c:	00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ec0:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0f     ................
    1ed0:	00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1ee0:	00 0f 00 00 0f 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f80:	00 00 05 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1f90:	00 00 00 00 00 00 00 0f 00 00 0f 00 00 0f 00 00     ................
    1fa0:	0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2044:	05 00 00 00 00 00 00 00 00 00 00 00 0f 00 00 00     ................
    2054:	00 00 00 00 00 0f 00 00 00 00 00 00 00 00 0f 00     ................
    2064:	00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00     ................
	...
    2104:	00 00 05 00 00 00 00 00 00 00 00 0f 00 00 00 00     ................
    2114:	00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00     ................
    2124:	0f 00 00 00 00 00 00 00 00 00 00 00 0f 00 00 00     ................
	...
    21c8:	05 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00     ................
    21d8:	00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    21e8:	00 0f 00 00 00 00 00 00 00 00 00 00 00 0f 00 00     ................
	...
    2288:	00 00 14 00 00 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    22b8:	00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    234c:	14 00 00 0f 00 00 0f 00 00 00 00 00 00 00 00 00     ................
	...
    2378:	00 0f 00 00 0f 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    240c:	00 00 05 00 00 0f 00 00 00 00 00 00 00 00 00 00     ................
    241c:	00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00     ................
    242c:	00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00     ................
    243c:	00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    24d0:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0f     ................
    24e0:	00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    24f0:	00 0f 00 00 0f 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2590:	00 00 05 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    25a0:	00 00 00 00 00 00 00 0f 00 00 0f 00 00 0f 00 00     ................
    25b0:	0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2654:	05 00 00 00 00 00 00 00 00 00 00 00 0f 00 00 00     ................
    2664:	00 00 00 00 00 0f 00 00 00 00 00 00 00 00 0f 00     ................
    2674:	00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00     ................
	...
    2714:	00 00 05 00 00 00 00 00 00 00 00 0f 00 00 00 00     ................
    2724:	00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00     ................
    2734:	0f 00 00 00 00 00 00 00 00 00 00 00 0f 00 00 00     ................
	...
    27d8:	05 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00     ................
    27e8:	00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    27f8:	00 0f 00 00 00 00 00 00 00 00 00 00 00 0f 00 00     ................
	...
    2898:	00 00 14 00 00 0f 00 00 0f 00 00 00 00 00 00 00     ................
    28a8:	00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    28b8:	00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 0f     ................
    28c8:	00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    295c:	14 00 00 0f 00 00 0f 00 00 00 00 00 00 00 00 0f     ................
	...
    2974:	0f 00 00 0f 00 00 00 00 00 00 00 00 0f 00 00 00     ................
    2984:	00 00 00 00 00 0f 00 00 0f 00 00 00 00 00 00 00     ................
	...
    2a1c:	00 00 05 00 00 0f 00 00 00 00 00 00 00 00 00 00     ................
    2a2c:	00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00     ................
    2a3c:	00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2a4c:	00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2ae0:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0f     ................
    2af0:	00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2b00:	00 0f 00 00 0f 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2ba0:	00 00 05 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2bb0:	00 00 00 00 00 00 00 0f 00 00 0f 00 00 0f 00 00     ................
    2bc0:	0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2c64:	05 00 00 00 00 00 00 00 00 00 00 00 0f 00 00 00     ................
    2c74:	00 00 00 00 00 0f 00 00 00 00 00 00 00 00 0f 00     ................
    2c84:	00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00     ................
	...
    2d24:	00 00 05 00 00 00 00 00 00 00 00 0f 00 00 00 00     ................
    2d34:	00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00     ................
    2d44:	0f 00 00 00 00 00 00 00 00 00 00 00 0f 00 00 00     ................
	...
    2de8:	05 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00     ................
    2df8:	00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e08:	00 0f 00 00 00 00 00 00 00 00 00 00 00 0f 00 00     ................
	...
    2ea8:	00 00 14 00 00 0f 00 00 0f 00 00 0f 00 00 00 00     ................
    2eb8:	00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ec8:	00 00 00 00 00 00 0f 00 00 00 00 00 0f 00 00 0f     ................
    2ed8:	00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2f6c:	14 00 00 0f 00 00 0f 00 00 0f 00 00 00 00 00 0f     ................
	...
    2f84:	0f 00 00 0f 00 00 00 00 00 00 00 00 0f 00 00 00     ................
    2f94:	00 00 0f 00 00 0f 00 00 0f 00 00 00 00 00 00 00     ................
	...
    302c:	00 00 05 00 00 0f 00 00 00 00 00 00 00 00 00 00     ................
    303c:	00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00     ................
    304c:	00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00     ................
    305c:	00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    30f0:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0f     ................
    3100:	00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3110:	00 0f 00 00 0f 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    31b0:	00 00 05 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    31c0:	00 00 00 00 00 00 00 0f 00 00 0f 00 00 0f 00 00     ................
    31d0:	0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3274:	05 00 00 00 00 00 00 00 00 00 00 00 0f 00 00 00     ................
    3284:	00 00 00 00 00 0f 00 00 00 00 00 00 00 00 0f 00     ................
    3294:	00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00     ................
	...
    3334:	00 00 05 00 00 00 00 00 00 00 00 0f 00 00 00 00     ................
    3344:	00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00     ................
    3354:	0f 00 00 00 00 00 00 00 00 00 00 00 0f 00 00 00     ................
	...
    33f8:	05 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00     ................
    3408:	00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3418:	00 0f 00 00 00 00 00 00 00 00 00 00 00 0f 00 00     ................
	...
    34b8:	00 00 14 00 00 0f 00 00 0f 00 00 0f 00 00 0f 00     ................
    34c8:	00 0f 00 00 0f 00 00 0f 00 00 0f 00 00 0f 00 00     ................
    34d8:	0f 00 00 0f 00 00 0f 00 00 0f 00 00 0f 00 00 0f     ................
    34e8:	00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    357c:	05 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00     ................
    358c:	00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    359c:	00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    35ac:	0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    363c:	00 00 05 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    364c:	00 0f 00 00 0f 00 00 00 00 00 00 00 00 00 00 00     ................
    365c:	00 00 00 0f 00 00 0f 00 00 00 00 00 00 00 00 00     ................
	...
    3700:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3710:	00 00 00 00 00 0f 00 00 0f 00 00 0f 00 00 0f 00     ................
	...
    37c0:	00 00 05 00 00 00 00 00 00 00 00 00 00 00 0f 00     ................
    37d0:	00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00     ................
    37e0:	0f 00 00 00 00 00 00 00 00 0f 00 00 00 00 00 00     ................
	...
    3884:	05 00 00 00 00 00 00 00 00 0f 00 00 00 00 00 00     ................
    3894:	00 00 00 00 00 0f 00 00 00 00 00 00 00 00 0f 00     ................
	...
    38ac:	00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3944:	00 00 05 00 00 00 00 00 0f 00 00 00 00 00 00 00     ................
    3954:	00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00     ................
    3964:	00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 0f     ................
	...
    3a08:	32 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     2...............
	...
    3ac8:	00 00 32 01 00 0f 00 00 0f 00 00 0f 00 00 0f 00     ..2.............
    3ad8:	00 0f 00 00 0f 00 00 0f 00 00 0f 00 00 0f 00 00     ................
    3ae8:	0f 00 00 0f 00 00 0f 00 00 0f 00 00 0f 00 00 0f     ................
    3af8:	00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00003c4e <__ctors_end>:
    3c4e:	11 24       	eor	r1, r1
    3c50:	1f be       	out	0x3f, r1	; 63
    3c52:	cf ef       	ldi	r28, 0xFF	; 255
    3c54:	d0 e1       	ldi	r29, 0x10	; 16
    3c56:	de bf       	out	0x3e, r29	; 62
    3c58:	cd bf       	out	0x3d, r28	; 61

00003c5a <__do_copy_data>:
    3c5a:	11 e0       	ldi	r17, 0x01	; 1
    3c5c:	a0 e0       	ldi	r26, 0x00	; 0
    3c5e:	b1 e0       	ldi	r27, 0x01	; 1
    3c60:	e2 e1       	ldi	r30, 0x12	; 18
    3c62:	f2 e4       	ldi	r31, 0x42	; 66
    3c64:	02 c0       	rjmp	.+4      	; 0x3c6a <.do_copy_data_start>

00003c66 <.do_copy_data_loop>:
    3c66:	05 90       	lpm	r0, Z+
    3c68:	0d 92       	st	X+, r0

00003c6a <.do_copy_data_start>:
    3c6a:	a2 30       	cpi	r26, 0x02	; 2
    3c6c:	b1 07       	cpc	r27, r17
    3c6e:	d9 f7       	brne	.-10     	; 0x3c66 <.do_copy_data_loop>

00003c70 <__do_clear_bss>:
    3c70:	13 e0       	ldi	r17, 0x03	; 3
    3c72:	a2 e0       	ldi	r26, 0x02	; 2
    3c74:	b1 e0       	ldi	r27, 0x01	; 1
    3c76:	01 c0       	rjmp	.+2      	; 0x3c7a <.do_clear_bss_start>

00003c78 <.do_clear_bss_loop>:
    3c78:	1d 92       	st	X+, r1

00003c7a <.do_clear_bss_start>:
    3c7a:	a1 37       	cpi	r26, 0x71	; 113
    3c7c:	b1 07       	cpc	r27, r17
    3c7e:	e1 f7       	brne	.-8      	; 0x3c78 <.do_clear_bss_loop>
    3c80:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <main>
    3c84:	0c 94 07 21 	jmp	0x420e	; 0x420e <_exit>

00003c88 <__bad_interrupt>:
    3c88:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00003c8c <InitPorts>:
#include "usart.h"


void InitPorts()
{
	DDRB = (1 << DDB_SCK) | (1 << DDB_T1);
    3c8c:	86 e0       	ldi	r24, 0x06	; 6
    3c8e:	84 b9       	out	0x04, r24	; 4
	DDRC = (1 << DDC_IN1) | (1 << DDC_IN2) | (1 << DDC_IN3) | (1 << DDC_IN4);
    3c90:	8f e0       	ldi	r24, 0x0F	; 15
    3c92:	87 b9       	out	0x07, r24	; 7
	DDRD = (1 << DDD_OE) | (1 << DDD_RCK);
    3c94:	84 e2       	ldi	r24, 0x24	; 36
    3c96:	8a b9       	out	0x0a, r24	; 10
	DataPort = 0;
    3c98:	18 b8       	out	0x08, r1	; 8
	ClockPort = 0;
    3c9a:	15 b8       	out	0x05, r1	; 5
}
    3c9c:	08 95       	ret

00003c9e <SetLevelPins>:

void SetLevelPins(int state) 
{
	DataPort = state;
    3c9e:	88 b9       	out	0x08, r24	; 8

 	ClockPort &= ~(1 << P_SCK);
    3ca0:	2a 98       	cbi	0x05, 2	; 5
 	ClockPort |= (1 << P_SCK);
    3ca2:	2a 9a       	sbi	0x05, 2	; 5
	ClockPort &= ~(1 << P_SCK);
    3ca4:	2a 98       	cbi	0x05, 2	; 5
	ClockPort &= ~(P_SCK_MASK);
 	ClockPort |= (P_SCK_MASK);
  	ClockPort &= ~(P_SCK_MASK);
*/

}
    3ca6:	08 95       	ret

00003ca8 <Latch>:

void Latch()
{
	LatchPort &= ~(1 << P_RCK);
    3ca8:	5d 98       	cbi	0x0b, 5	; 11
	LatchPort |= (1 << P_RCK);
    3caa:	5d 9a       	sbi	0x0b, 5	; 11
	LatchPort &= ~(1 << P_RCK);
    3cac:	5d 98       	cbi	0x0b, 5	; 11
	LatchPort &= ~(1 << P_OE);
    3cae:	5a 98       	cbi	0x0b, 2	; 11
}
    3cb0:	08 95       	ret

00003cb2 <fade>:

void fade() //2 bresenhams
{
    3cb2:	cf 92       	push	r12
    3cb4:	df 92       	push	r13
    3cb6:	ef 92       	push	r14
    3cb8:	ff 92       	push	r15
    3cba:	0f 93       	push	r16
    3cbc:	1f 93       	push	r17
    3cbe:	cf 93       	push	r28
    3cc0:	df 93       	push	r29
	int i;

	while (XChanged != 1)
	{
	    if (fademode == 1) XChanged = 1; 
    3cc2:	c0 90 00 01 	lds	r12, 0x0100
					eY[i] += (dY[i]+PWMres);
				}
			}
		}
		
		if (2*(eX + dX) < PWMres)
    3cc6:	70 91 6f 03 	lds	r23, 0x036F
    3cca:	e7 2e       	mov	r14, r23
    3ccc:	ff 24       	eor	r15, r15
    3cce:	e7 fc       	sbrc	r14, 7
    3cd0:	f0 94       	com	r15
		{
			eX += dX;
    3cd2:	00 91 ae 02 	lds	r16, 0x02AE
    3cd6:	10 91 70 03 	lds	r17, 0x0370
    3cda:	60 91 ad 02 	lds	r22, 0x02AD
    3cde:	d0 90 29 01 	lds	r13, 0x0129
    3ce2:	54 c0       	rjmp	.+168    	; 0x3d8c <fade+0xda>
{
	int i;

	while (XChanged != 1)
	{
	    if (fademode == 1) XChanged = 1; 
    3ce4:	81 e0       	ldi	r24, 0x01	; 1
    3ce6:	c8 16       	cp	r12, r24
    3ce8:	11 f4       	brne	.+4      	; 0x3cee <fade+0x3c>
    3cea:	dd 24       	eor	r13, r13
    3cec:	d3 94       	inc	r13
    3cee:	cd ee       	ldi	r28, 0xED	; 237
    3cf0:	d1 e0       	ldi	r29, 0x01	; 1
    3cf2:	af ea       	ldi	r26, 0xAF	; 175
    3cf4:	b2 e0       	ldi	r27, 0x02	; 2
    3cf6:	ea e2       	ldi	r30, 0x2A	; 42
    3cf8:	f1 e0       	ldi	r31, 0x01	; 1
		for (i = 0; i < MaxLedPins; i++)
		{
			if (dY[i] > 0) 
    3cfa:	58 81       	ld	r21, Y
    3cfc:	40 81       	ld	r20, Z
    3cfe:	25 2f       	mov	r18, r21
    3d00:	33 27       	eor	r19, r19
    3d02:	27 fd       	sbrc	r18, 7
    3d04:	30 95       	com	r19
    3d06:	15 16       	cp	r1, r21
    3d08:	9c f4       	brge	.+38     	; 0x3d30 <fade+0x7e>
			{
				if (2*(eY[i] + dY[i]) < PWMres)
    3d0a:	84 2f       	mov	r24, r20
    3d0c:	99 27       	eor	r25, r25
    3d0e:	87 fd       	sbrc	r24, 7
    3d10:	90 95       	com	r25
    3d12:	28 0f       	add	r18, r24
    3d14:	39 1f       	adc	r19, r25
    3d16:	22 0f       	add	r18, r18
    3d18:	33 1f       	adc	r19, r19
    3d1a:	95 2f       	mov	r25, r21
    3d1c:	94 0f       	add	r25, r20
    3d1e:	24 31       	cpi	r18, 0x14	; 20
    3d20:	31 05       	cpc	r19, r1
    3d22:	24 f0       	brlt	.+8      	; 0x3d2c <fade+0x7a>
				{
					eY[i] += dY[i];
				}
				else
				{
					PWM[i]++;
    3d24:	8c 91       	ld	r24, X
    3d26:	8f 5f       	subi	r24, 0xFF	; 255
    3d28:	8c 93       	st	X, r24
					eY[i] += (dY[i]-PWMres);
    3d2a:	94 51       	subi	r25, 0x14	; 20
    3d2c:	90 83       	st	Z, r25
    3d2e:	16 c0       	rjmp	.+44     	; 0x3d5c <fade+0xaa>
				}
			}
			else
			{
				if (2*(eY[i] + dY[i]) > (-1*PWMres))
    3d30:	84 2f       	mov	r24, r20
    3d32:	99 27       	eor	r25, r25
    3d34:	87 fd       	sbrc	r24, 7
    3d36:	90 95       	com	r25
    3d38:	28 0f       	add	r18, r24
    3d3a:	39 1f       	adc	r19, r25
    3d3c:	22 0f       	add	r18, r18
    3d3e:	33 1f       	adc	r19, r19
    3d40:	2d 5e       	subi	r18, 0xED	; 237
    3d42:	3f 4f       	sbci	r19, 0xFF	; 255
    3d44:	1c f0       	brlt	.+6      	; 0x3d4c <fade+0x9a>
				{
					eY[i] += dY[i];
    3d46:	54 0f       	add	r21, r20
    3d48:	50 83       	st	Z, r21
    3d4a:	08 c0       	rjmp	.+16     	; 0x3d5c <fade+0xaa>
				}
				else
				{
					if (PWM[i] > 0) PWM[i]--; //BugFixPWMDec 09.11.23
    3d4c:	8c 91       	ld	r24, X
    3d4e:	18 16       	cp	r1, r24
    3d50:	14 f4       	brge	.+4      	; 0x3d56 <fade+0xa4>
    3d52:	81 50       	subi	r24, 0x01	; 1
    3d54:	8c 93       	st	X, r24
					eY[i] += (dY[i]+PWMres);
    3d56:	45 0f       	add	r20, r21
    3d58:	4c 5e       	subi	r20, 0xEC	; 236
    3d5a:	40 83       	st	Z, r20
    3d5c:	21 96       	adiw	r28, 0x01	; 1
    3d5e:	11 96       	adiw	r26, 0x01	; 1
    3d60:	31 96       	adiw	r30, 0x01	; 1
	int i;

	while (XChanged != 1)
	{
	    if (fademode == 1) XChanged = 1; 
		for (i = 0; i < MaxLedPins; i++)
    3d62:	82 e0       	ldi	r24, 0x02	; 2
    3d64:	cd 3a       	cpi	r28, 0xAD	; 173
    3d66:	d8 07       	cpc	r29, r24
    3d68:	41 f6       	brne	.-112    	; 0x3cfa <fade+0x48>
					eY[i] += (dY[i]+PWMres);
				}
			}
		}
		
		if (2*(eX + dX) < PWMres)
    3d6a:	86 2f       	mov	r24, r22
    3d6c:	99 27       	eor	r25, r25
    3d6e:	87 fd       	sbrc	r24, 7
    3d70:	90 95       	com	r25
    3d72:	8e 0d       	add	r24, r14
    3d74:	9f 1d       	adc	r25, r15
    3d76:	88 0f       	add	r24, r24
    3d78:	99 1f       	adc	r25, r25
    3d7a:	44 97       	sbiw	r24, 0x14	; 20
    3d7c:	14 f4       	brge	.+4      	; 0x3d82 <fade+0xd0>
		{
			eX += dX;
    3d7e:	67 0f       	add	r22, r23
    3d80:	05 c0       	rjmp	.+10     	; 0x3d8c <fade+0xda>
		}
		else
		{
			X++;
    3d82:	1f 5f       	subi	r17, 0xFF	; 255
			Hold++;
    3d84:	0f 5f       	subi	r16, 0xFF	; 255
			eX += dX-PWMres;
    3d86:	74 51       	subi	r23, 0x14	; 20
    3d88:	67 0f       	add	r22, r23
    3d8a:	04 c0       	rjmp	.+8      	; 0x3d94 <fade+0xe2>

void fade() //2 bresenhams
{
	int i;

	while (XChanged != 1)
    3d8c:	81 e0       	ldi	r24, 0x01	; 1
    3d8e:	d8 16       	cp	r13, r24
    3d90:	09 f0       	breq	.+2      	; 0x3d94 <fade+0xe2>
    3d92:	a8 cf       	rjmp	.-176    	; 0x3ce4 <fade+0x32>
    3d94:	00 93 ae 02 	sts	0x02AE, r16
    3d98:	10 93 70 03 	sts	0x0370, r17
    3d9c:	60 93 ad 02 	sts	0x02AD, r22
			eX += dX-PWMres;
			XChanged = 1;
		}

	}
	XChanged = 0;
    3da0:	10 92 29 01 	sts	0x0129, r1
}
    3da4:	df 91       	pop	r29
    3da6:	cf 91       	pop	r28
    3da8:	1f 91       	pop	r17
    3daa:	0f 91       	pop	r16
    3dac:	ff 90       	pop	r15
    3dae:	ef 90       	pop	r14
    3db0:	df 90       	pop	r13
    3db2:	cf 90       	pop	r12
    3db4:	08 95       	ret

00003db6 <main>:

int main()
{
    3db6:	4f 92       	push	r4
    3db8:	5f 92       	push	r5
    3dba:	6f 92       	push	r6
    3dbc:	7f 92       	push	r7
    3dbe:	8f 92       	push	r8
    3dc0:	9f 92       	push	r9
    3dc2:	af 92       	push	r10
    3dc4:	bf 92       	push	r11
    3dc6:	cf 92       	push	r12
    3dc8:	df 92       	push	r13
    3dca:	ef 92       	push	r14
    3dcc:	ff 92       	push	r15
    3dce:	1f 93       	push	r17
    3dd0:	df 93       	push	r29
    3dd2:	cf 93       	push	r28
    3dd4:	cd b7       	in	r28, 0x3d	; 61
    3dd6:	de b7       	in	r29, 0x3e	; 62
    3dd8:	2c 97       	sbiw	r28, 0x0c	; 12
    3dda:	0f b6       	in	r0, 0x3f	; 63
    3ddc:	f8 94       	cli
    3dde:	de bf       	out	0x3e, r29	; 62
    3de0:	0f be       	out	0x3f, r0	; 63
    3de2:	cd bf       	out	0x3d, r28	; 61
	volatile signed int i, aColumn, aLevel, mask, mux, patterncntr;

	patterncntr = 0;
    3de4:	1c 86       	std	Y+12, r1	; 0x0c
    3de6:	1b 86       	std	Y+11, r1	; 0x0b
	Hold = 0;
    3de8:	10 92 ae 02 	sts	0x02AE, r1
#include "usart.h"


void InitPorts()
{
	DDRB = (1 << DDB_SCK) | (1 << DDB_T1);
    3dec:	86 e0       	ldi	r24, 0x06	; 6
    3dee:	84 b9       	out	0x04, r24	; 4
	DDRC = (1 << DDC_IN1) | (1 << DDC_IN2) | (1 << DDC_IN3) | (1 << DDC_IN4);
    3df0:	8f e0       	ldi	r24, 0x0F	; 15
    3df2:	87 b9       	out	0x07, r24	; 7
	DDRD = (1 << DDD_OE) | (1 << DDD_RCK);
    3df4:	84 e2       	ldi	r24, 0x24	; 36
    3df6:	8a b9       	out	0x0a, r24	; 10
	DataPort = 0;
    3df8:	18 b8       	out	0x08, r1	; 8
	ClockPort = 0;
    3dfa:	15 b8       	out	0x05, r1	; 5

	patterncntr = 0;
	Hold = 0;

	InitPorts();
	CARDinit();
    3dfc:	0e 94 86 20 	call	0x410c	; 0x410c <CARDinit>
	USARTinit();
    3e00:	0e 94 9b 20 	call	0x4136	; 0x4136 <USARTinit>
							mask = 0;
							aLevel = MaxLevels;
							while (aLevel > 0)
							{	
								aLevel--;
								idx = aColumn+mux * LedPinsPerColumn + aLevel * LedPinsPerLevel;
    3e04:	b0 e3       	ldi	r27, 0x30	; 48
    3e06:	6b 2e       	mov	r6, r27
    3e08:	71 2c       	mov	r7, r1
								if (i < PWM[idx]) mask |= (1 << aLevel);
    3e0a:	a1 e0       	ldi	r26, 0x01	; 1
    3e0c:	4a 2e       	mov	r4, r26
    3e0e:	51 2c       	mov	r5, r1
	ClockPort = 0;
}

void SetLevelPins(int state) 
{
	DataPort = state;
    3e10:	1f e0       	ldi	r17, 0x0F	; 15
					{
						mux--;
						for (aColumn = LedPinsPerColumn-1; aColumn >= 0; aColumn--)
						{	
							mask = 0;
							aLevel = MaxLevels;
    3e12:	f4 e0       	ldi	r31, 0x04	; 4
    3e14:	cf 2e       	mov	r12, r31
    3e16:	d1 2c       	mov	r13, r1
					
					mux = MaxMux;
					while (mux > 0)
					{
						mux--;
						for (aColumn = LedPinsPerColumn-1; aColumn >= 0; aColumn--)
    3e18:	eb e0       	ldi	r30, 0x0B	; 11
    3e1a:	ae 2e       	mov	r10, r30
    3e1c:	b1 2c       	mov	r11, r1
						{	
							mask = 0;
							aLevel = MaxLevels;
    3e1e:	74 e0       	ldi	r23, 0x04	; 4
    3e20:	87 2e       	mov	r8, r23
    3e22:	91 2c       	mov	r9, r1
    3e24:	66 c1       	rjmp	.+716    	; 0x40f2 <main+0x33c>
	while (1) 
	{
	
		while (patterncntr < numanimas)
		{
			X = 0;
    3e26:	10 92 70 03 	sts	0x0370, r1
			eX = 0;
    3e2a:	10 92 ad 02 	sts	0x02AD, r1
			XChanged = 0;
    3e2e:	10 92 29 01 	sts	0x0129, r1
			dX = pgm_read_byte(&AnimationA[patterncntr].hold);
    3e32:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e34:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e36:	22 ec       	ldi	r18, 0xC2	; 194
    3e38:	30 e0       	ldi	r19, 0x00	; 0
    3e3a:	82 9f       	mul	r24, r18
    3e3c:	f0 01       	movw	r30, r0
    3e3e:	83 9f       	mul	r24, r19
    3e40:	f0 0d       	add	r31, r0
    3e42:	92 9f       	mul	r25, r18
    3e44:	f0 0d       	add	r31, r0
    3e46:	11 24       	eor	r1, r1
    3e48:	e0 59       	subi	r30, 0x90	; 144
    3e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4c:	e4 91       	lpm	r30, Z+
    3e4e:	e0 93 6f 03 	sts	0x036F, r30
			fademode = pgm_read_byte(&AnimationA[patterncntr].fade);
    3e52:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e54:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e56:	82 9f       	mul	r24, r18
    3e58:	f0 01       	movw	r30, r0
    3e5a:	83 9f       	mul	r24, r19
    3e5c:	f0 0d       	add	r31, r0
    3e5e:	92 9f       	mul	r25, r18
    3e60:	f0 0d       	add	r31, r0
    3e62:	11 24       	eor	r1, r1
    3e64:	ef 58       	subi	r30, 0x8F	; 143
    3e66:	ff 4f       	sbci	r31, 0xFF	; 255
    3e68:	e4 91       	lpm	r30, Z+
    3e6a:	e0 93 00 01 	sts	0x0100, r30

			for (i = 0; i < MaxLedPins; i++)
    3e6e:	1a 82       	std	Y+2, r1	; 0x02
    3e70:	19 82       	std	Y+1, r1	; 0x01
    3e72:	40 91 eb 01 	lds	r20, 0x01EB
    3e76:	20 91 ea 01 	lds	r18, 0x01EA
    3e7a:	30 91 ec 01 	lds	r19, 0x01EC
				aDivRes = div(i, LedPinsPerLevel);
				aLevel = aDivRes.quot;
				aLedPin = i;
				aLedPin %= LedPinsPerLevel;
				*/
			  	YStart = pgm_read_byte(&AnimationA[patterncntr].pwm[i]);
    3e7e:	a2 ec       	ldi	r26, 0xC2	; 194
    3e80:	b0 e0       	ldi	r27, 0x00	; 0
				PWM[i] = YStart;
				if (patterncntr < numanimas-1) idx = patterncntr+1; else idx = 0;
    3e82:	61 50       	subi	r22, 0x01	; 1
    3e84:	70 40       	sbci	r23, 0x00	; 0
				YEnd = pgm_read_byte(&AnimationA[idx].pwm[i]);
    3e86:	52 ec       	ldi	r21, 0xC2	; 194
    3e88:	3c c0       	rjmp	.+120    	; 0x3f02 <main+0x14c>
			dX = pgm_read_byte(&AnimationA[patterncntr].hold);
			fademode = pgm_read_byte(&AnimationA[patterncntr].fade);

			for (i = 0; i < MaxLedPins; i++)
			{	
				eY[i] = 0;
    3e8a:	e9 81       	ldd	r30, Y+1	; 0x01
    3e8c:	fa 81       	ldd	r31, Y+2	; 0x02
    3e8e:	e6 5d       	subi	r30, 0xD6	; 214
    3e90:	fe 4f       	sbci	r31, 0xFE	; 254
    3e92:	10 82       	st	Z, r1
				aDivRes = div(i, LedPinsPerLevel);
				aLevel = aDivRes.quot;
				aLedPin = i;
				aLedPin %= LedPinsPerLevel;
				*/
			  	YStart = pgm_read_byte(&AnimationA[patterncntr].pwm[i]);
    3e94:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e96:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e98:	e9 81       	ldd	r30, Y+1	; 0x01
    3e9a:	fa 81       	ldd	r31, Y+2	; 0x02
    3e9c:	9c 01       	movw	r18, r24
    3e9e:	2a 9f       	mul	r18, r26
    3ea0:	c0 01       	movw	r24, r0
    3ea2:	2b 9f       	mul	r18, r27
    3ea4:	90 0d       	add	r25, r0
    3ea6:	3a 9f       	mul	r19, r26
    3ea8:	90 0d       	add	r25, r0
    3eaa:	11 24       	eor	r1, r1
    3eac:	e8 0f       	add	r30, r24
    3eae:	f9 1f       	adc	r31, r25
    3eb0:	ee 58       	subi	r30, 0x8E	; 142
    3eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb4:	44 91       	lpm	r20, Z+
				PWM[i] = YStart;
    3eb6:	e9 81       	ldd	r30, Y+1	; 0x01
    3eb8:	fa 81       	ldd	r31, Y+2	; 0x02
    3eba:	e1 55       	subi	r30, 0x51	; 81
    3ebc:	fd 4f       	sbci	r31, 0xFD	; 253
    3ebe:	40 83       	st	Z, r20
				if (patterncntr < numanimas-1) idx = patterncntr+1; else idx = 0;
    3ec0:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ec2:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ec4:	86 17       	cp	r24, r22
    3ec6:	97 07       	cpc	r25, r23
    3ec8:	14 f0       	brlt	.+4      	; 0x3ece <main+0x118>
    3eca:	30 e0       	ldi	r19, 0x00	; 0
    3ecc:	04 c0       	rjmp	.+8      	; 0x3ed6 <main+0x120>
    3ece:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ed0:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ed2:	38 2f       	mov	r19, r24
    3ed4:	3f 5f       	subi	r19, 0xFF	; 255
				YEnd = pgm_read_byte(&AnimationA[idx].pwm[i]);
    3ed6:	e9 81       	ldd	r30, Y+1	; 0x01
    3ed8:	fa 81       	ldd	r31, Y+2	; 0x02
    3eda:	35 9f       	mul	r19, r21
    3edc:	c0 01       	movw	r24, r0
    3ede:	11 24       	eor	r1, r1
    3ee0:	e8 0f       	add	r30, r24
    3ee2:	f9 1f       	adc	r31, r25
    3ee4:	ee 58       	subi	r30, 0x8E	; 142
    3ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee8:	24 91       	lpm	r18, Z+
				dY[i] = YEnd-YStart;		 
    3eea:	e9 81       	ldd	r30, Y+1	; 0x01
    3eec:	fa 81       	ldd	r31, Y+2	; 0x02
    3eee:	e3 51       	subi	r30, 0x13	; 19
    3ef0:	fe 4f       	sbci	r31, 0xFE	; 254
    3ef2:	82 2f       	mov	r24, r18
    3ef4:	84 1b       	sub	r24, r20
    3ef6:	80 83       	st	Z, r24
			eX = 0;
			XChanged = 0;
			dX = pgm_read_byte(&AnimationA[patterncntr].hold);
			fademode = pgm_read_byte(&AnimationA[patterncntr].fade);

			for (i = 0; i < MaxLedPins; i++)
    3ef8:	89 81       	ldd	r24, Y+1	; 0x01
    3efa:	9a 81       	ldd	r25, Y+2	; 0x02
    3efc:	01 96       	adiw	r24, 0x01	; 1
    3efe:	9a 83       	std	Y+2, r25	; 0x02
    3f00:	89 83       	std	Y+1, r24	; 0x01
    3f02:	89 81       	ldd	r24, Y+1	; 0x01
    3f04:	9a 81       	ldd	r25, Y+2	; 0x02
    3f06:	80 3c       	cpi	r24, 0xC0	; 192
    3f08:	91 05       	cpc	r25, r1
    3f0a:	0c f4       	brge	.+2      	; 0x3f0e <main+0x158>
    3f0c:	be cf       	rjmp	.-132    	; 0x3e8a <main+0xd4>
    3f0e:	40 93 eb 01 	sts	0x01EB, r20
    3f12:	20 93 ea 01 	sts	0x01EA, r18
    3f16:	30 93 ec 01 	sts	0x01EC, r19
				PWM[i] = YStart;
				if (patterncntr < numanimas-1) idx = patterncntr+1; else idx = 0;
				YEnd = pgm_read_byte(&AnimationA[idx].pwm[i]);
				dY[i] = YEnd-YStart;		 
			}
			Hold = 0;
    3f1a:	10 92 ae 02 	sts	0x02AE, r1

			while (Hold <= pgm_read_byte(&AnimationA[patterncntr].hold))
    3f1e:	62 ec       	ldi	r22, 0xC2	; 194
    3f20:	e6 2e       	mov	r14, r22
    3f22:	f1 2c       	mov	r15, r1
    3f24:	ce c0       	rjmp	.+412    	; 0x40c2 <main+0x30c>
			{
				
				if (fademode > 0) fade();
    3f26:	80 91 00 01 	lds	r24, 0x0100
    3f2a:	88 23       	and	r24, r24
    3f2c:	11 f0       	breq	.+4      	; 0x3f32 <main+0x17c>
    3f2e:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <fade>

				for (i=0; i<=PWMres; i++)
    3f32:	1a 82       	std	Y+2, r1	; 0x02
    3f34:	19 82       	std	Y+1, r1	; 0x01
    3f36:	b7 c0       	rjmp	.+366    	; 0x40a6 <main+0x2f0>
				{	
					
					CARDloop();
    3f38:	0e 94 89 20 	call	0x4112	; 0x4112 <CARDloop>
					USARTloop();
    3f3c:	0e 94 b4 20 	call	0x4168	; 0x4168 <USARTloop>
					
					mux = MaxMux;
    3f40:	da 86       	std	Y+10, r13	; 0x0a
    3f42:	c9 86       	std	Y+9, r12	; 0x09
    3f44:	40 91 ec 01 	lds	r20, 0x01EC
    3f48:	a1 c0       	rjmp	.+322    	; 0x408c <main+0x2d6>
					while (mux > 0)
					{
						mux--;
    3f4a:	89 85       	ldd	r24, Y+9	; 0x09
    3f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f4e:	01 97       	sbiw	r24, 0x01	; 1
    3f50:	9a 87       	std	Y+10, r25	; 0x0a
    3f52:	89 87       	std	Y+9, r24	; 0x09
						for (aColumn = LedPinsPerColumn-1; aColumn >= 0; aColumn--)
    3f54:	bc 82       	std	Y+4, r11	; 0x04
    3f56:	ab 82       	std	Y+3, r10	; 0x03
    3f58:	4e c0       	rjmp	.+156    	; 0x3ff6 <main+0x240>
						{	
							mask = 0;
    3f5a:	18 86       	std	Y+8, r1	; 0x08
    3f5c:	1f 82       	std	Y+7, r1	; 0x07
							aLevel = MaxLevels;
    3f5e:	9e 82       	std	Y+6, r9	; 0x06
    3f60:	8d 82       	std	Y+5, r8	; 0x05
    3f62:	39 c0       	rjmp	.+114    	; 0x3fd6 <main+0x220>
							while (aLevel > 0)
							{	
								aLevel--;
    3f64:	8d 81       	ldd	r24, Y+5	; 0x05
    3f66:	9e 81       	ldd	r25, Y+6	; 0x06
    3f68:	01 97       	sbiw	r24, 0x01	; 1
    3f6a:	9e 83       	std	Y+6, r25	; 0x06
    3f6c:	8d 83       	std	Y+5, r24	; 0x05
								idx = aColumn+mux * LedPinsPerColumn + aLevel * LedPinsPerLevel;
    3f6e:	6b 81       	ldd	r22, Y+3	; 0x03
    3f70:	7c 81       	ldd	r23, Y+4	; 0x04
    3f72:	8d 81       	ldd	r24, Y+5	; 0x05
    3f74:	9e 81       	ldd	r25, Y+6	; 0x06
    3f76:	29 85       	ldd	r18, Y+9	; 0x09
    3f78:	3a 85       	ldd	r19, Y+10	; 0x0a
    3f7a:	86 9d       	mul	r24, r6
    3f7c:	a0 01       	movw	r20, r0
    3f7e:	87 9d       	mul	r24, r7
    3f80:	50 0d       	add	r21, r0
    3f82:	96 9d       	mul	r25, r6
    3f84:	50 0d       	add	r21, r0
    3f86:	11 24       	eor	r1, r1
    3f88:	c9 01       	movw	r24, r18
    3f8a:	88 0f       	add	r24, r24
    3f8c:	99 1f       	adc	r25, r25
    3f8e:	82 0f       	add	r24, r18
    3f90:	93 1f       	adc	r25, r19
    3f92:	88 0f       	add	r24, r24
    3f94:	99 1f       	adc	r25, r25
    3f96:	88 0f       	add	r24, r24
    3f98:	99 1f       	adc	r25, r25
    3f9a:	48 0f       	add	r20, r24
    3f9c:	46 0f       	add	r20, r22
								if (i < PWM[idx]) mask |= (1 << aLevel);
    3f9e:	29 81       	ldd	r18, Y+1	; 0x01
    3fa0:	3a 81       	ldd	r19, Y+2	; 0x02
    3fa2:	e4 2f       	mov	r30, r20
    3fa4:	f0 e0       	ldi	r31, 0x00	; 0
    3fa6:	e1 55       	subi	r30, 0x51	; 81
    3fa8:	fd 4f       	sbci	r31, 0xFD	; 253
    3faa:	80 81       	ld	r24, Z
    3fac:	99 27       	eor	r25, r25
    3fae:	87 fd       	sbrc	r24, 7
    3fb0:	90 95       	com	r25
    3fb2:	28 17       	cp	r18, r24
    3fb4:	39 07       	cpc	r19, r25
    3fb6:	7c f4       	brge	.+30     	; 0x3fd6 <main+0x220>
    3fb8:	2f 81       	ldd	r18, Y+7	; 0x07
    3fba:	38 85       	ldd	r19, Y+8	; 0x08
    3fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    3fbe:	9e 81       	ldd	r25, Y+6	; 0x06
    3fc0:	b2 01       	movw	r22, r4
    3fc2:	02 c0       	rjmp	.+4      	; 0x3fc8 <main+0x212>
    3fc4:	66 0f       	add	r22, r22
    3fc6:	77 1f       	adc	r23, r23
    3fc8:	8a 95       	dec	r24
    3fca:	e2 f7       	brpl	.-8      	; 0x3fc4 <main+0x20e>
    3fcc:	cb 01       	movw	r24, r22
    3fce:	82 2b       	or	r24, r18
    3fd0:	93 2b       	or	r25, r19
    3fd2:	98 87       	std	Y+8, r25	; 0x08
    3fd4:	8f 83       	std	Y+7, r24	; 0x07
						mux--;
						for (aColumn = LedPinsPerColumn-1; aColumn >= 0; aColumn--)
						{	
							mask = 0;
							aLevel = MaxLevels;
							while (aLevel > 0)
    3fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    3fd8:	9e 81       	ldd	r25, Y+6	; 0x06
    3fda:	18 16       	cp	r1, r24
    3fdc:	19 06       	cpc	r1, r25
    3fde:	14 f2       	brlt	.-124    	; 0x3f64 <main+0x1ae>
							{	
								aLevel--;
								idx = aColumn+mux * LedPinsPerColumn + aLevel * LedPinsPerLevel;
								if (i < PWM[idx]) mask |= (1 << aLevel);
							}
							SetLevelPins(mask);
    3fe0:	8f 81       	ldd	r24, Y+7	; 0x07
    3fe2:	98 85       	ldd	r25, Y+8	; 0x08
	ClockPort = 0;
}

void SetLevelPins(int state) 
{
	DataPort = state;
    3fe4:	88 b9       	out	0x08, r24	; 8

 	ClockPort &= ~(1 << P_SCK);
    3fe6:	2a 98       	cbi	0x05, 2	; 5
 	ClockPort |= (1 << P_SCK);
    3fe8:	2a 9a       	sbi	0x05, 2	; 5
	ClockPort &= ~(1 << P_SCK);
    3fea:	2a 98       	cbi	0x05, 2	; 5
					
					mux = MaxMux;
					while (mux > 0)
					{
						mux--;
						for (aColumn = LedPinsPerColumn-1; aColumn >= 0; aColumn--)
    3fec:	8b 81       	ldd	r24, Y+3	; 0x03
    3fee:	9c 81       	ldd	r25, Y+4	; 0x04
    3ff0:	01 97       	sbiw	r24, 0x01	; 1
    3ff2:	9c 83       	std	Y+4, r25	; 0x04
    3ff4:	8b 83       	std	Y+3, r24	; 0x03
    3ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff8:	9c 81       	ldd	r25, Y+4	; 0x04
    3ffa:	97 ff       	sbrs	r25, 7
    3ffc:	ae cf       	rjmp	.-164    	; 0x3f5a <main+0x1a4>
								if (i < PWM[idx]) mask |= (1 << aLevel);
							}
							SetLevelPins(mask);
			
						}
						switch (mux)
    3ffe:	89 85       	ldd	r24, Y+9	; 0x09
    4000:	9a 85       	ldd	r25, Y+10	; 0x0a
    4002:	81 30       	cpi	r24, 0x01	; 1
    4004:	91 05       	cpc	r25, r1
    4006:	91 f0       	breq	.+36     	; 0x402c <main+0x276>
    4008:	82 30       	cpi	r24, 0x02	; 2
    400a:	91 05       	cpc	r25, r1
    400c:	1c f4       	brge	.+6      	; 0x4014 <main+0x25e>
    400e:	89 2b       	or	r24, r25
    4010:	39 f0       	breq	.+14     	; 0x4020 <main+0x26a>
    4012:	34 c0       	rjmp	.+104    	; 0x407c <main+0x2c6>
    4014:	82 30       	cpi	r24, 0x02	; 2
    4016:	91 05       	cpc	r25, r1
    4018:	99 f0       	breq	.+38     	; 0x4040 <main+0x28a>
    401a:	03 97       	sbiw	r24, 0x03	; 3
    401c:	79 f5       	brne	.+94     	; 0x407c <main+0x2c6>
    401e:	1e c0       	rjmp	.+60     	; 0x405c <main+0x2a6>
	ClockPort = 0;
}

void SetLevelPins(int state) 
{
	DataPort = state;
    4020:	18 b9       	out	0x08, r17	; 8

 	ClockPort &= ~(1 << P_SCK);
    4022:	2a 98       	cbi	0x05, 2	; 5
 	ClockPort |= (1 << P_SCK);
    4024:	2a 9a       	sbi	0x05, 2	; 5
	ClockPort &= ~(1 << P_SCK);
    4026:	2a 98       	cbi	0x05, 2	; 5
	ClockPort = 0;
}

void SetLevelPins(int state) 
{
	DataPort = state;
    4028:	18 b8       	out	0x08, r1	; 8
    402a:	05 c0       	rjmp	.+10     	; 0x4036 <main+0x280>

 	ClockPort &= ~(1 << P_SCK);
    402c:	18 b8       	out	0x08, r1	; 8
    402e:	2a 98       	cbi	0x05, 2	; 5
 	ClockPort |= (1 << P_SCK);
    4030:	2a 9a       	sbi	0x05, 2	; 5
	ClockPort &= ~(1 << P_SCK);
    4032:	2a 98       	cbi	0x05, 2	; 5
	ClockPort = 0;
}

void SetLevelPins(int state) 
{
	DataPort = state;
    4034:	18 b9       	out	0x08, r17	; 8

 	ClockPort &= ~(1 << P_SCK);
    4036:	2a 98       	cbi	0x05, 2	; 5
 	ClockPort |= (1 << P_SCK);
    4038:	2a 9a       	sbi	0x05, 2	; 5
	ClockPort &= ~(1 << P_SCK);
    403a:	2a 98       	cbi	0x05, 2	; 5
	ClockPort = 0;
}

void SetLevelPins(int state) 
{
	DataPort = state;
    403c:	18 b8       	out	0x08, r1	; 8
    403e:	09 c0       	rjmp	.+18     	; 0x4052 <main+0x29c>

 	ClockPort &= ~(1 << P_SCK);
    4040:	18 b8       	out	0x08, r1	; 8
    4042:	2a 98       	cbi	0x05, 2	; 5
 	ClockPort |= (1 << P_SCK);
    4044:	2a 9a       	sbi	0x05, 2	; 5
	ClockPort &= ~(1 << P_SCK);
    4046:	2a 98       	cbi	0x05, 2	; 5
	ClockPort = 0;
}

void SetLevelPins(int state) 
{
	DataPort = state;
    4048:	18 b8       	out	0x08, r1	; 8

 	ClockPort &= ~(1 << P_SCK);
    404a:	2a 98       	cbi	0x05, 2	; 5
 	ClockPort |= (1 << P_SCK);
    404c:	2a 9a       	sbi	0x05, 2	; 5
	ClockPort &= ~(1 << P_SCK);
    404e:	2a 98       	cbi	0x05, 2	; 5
	ClockPort = 0;
}

void SetLevelPins(int state) 
{
	DataPort = state;
    4050:	18 b9       	out	0x08, r17	; 8

 	ClockPort &= ~(1 << P_SCK);
    4052:	2a 98       	cbi	0x05, 2	; 5
 	ClockPort |= (1 << P_SCK);
    4054:	2a 9a       	sbi	0x05, 2	; 5
	ClockPort &= ~(1 << P_SCK);
    4056:	2a 98       	cbi	0x05, 2	; 5
	ClockPort = 0;
}

void SetLevelPins(int state) 
{
	DataPort = state;
    4058:	18 b8       	out	0x08, r1	; 8
    405a:	0d c0       	rjmp	.+26     	; 0x4076 <main+0x2c0>

 	ClockPort &= ~(1 << P_SCK);
    405c:	18 b8       	out	0x08, r1	; 8
    405e:	2a 98       	cbi	0x05, 2	; 5
 	ClockPort |= (1 << P_SCK);
    4060:	2a 9a       	sbi	0x05, 2	; 5
	ClockPort &= ~(1 << P_SCK);
    4062:	2a 98       	cbi	0x05, 2	; 5
	ClockPort = 0;
}

void SetLevelPins(int state) 
{
	DataPort = state;
    4064:	18 b8       	out	0x08, r1	; 8

 	ClockPort &= ~(1 << P_SCK);
    4066:	2a 98       	cbi	0x05, 2	; 5
 	ClockPort |= (1 << P_SCK);
    4068:	2a 9a       	sbi	0x05, 2	; 5
	ClockPort &= ~(1 << P_SCK);
    406a:	2a 98       	cbi	0x05, 2	; 5
	ClockPort = 0;
}

void SetLevelPins(int state) 
{
	DataPort = state;
    406c:	18 b8       	out	0x08, r1	; 8

 	ClockPort &= ~(1 << P_SCK);
    406e:	2a 98       	cbi	0x05, 2	; 5
 	ClockPort |= (1 << P_SCK);
    4070:	2a 9a       	sbi	0x05, 2	; 5
	ClockPort &= ~(1 << P_SCK);
    4072:	2a 98       	cbi	0x05, 2	; 5
	ClockPort = 0;
}

void SetLevelPins(int state) 
{
	DataPort = state;
    4074:	18 b9       	out	0x08, r17	; 8

 	ClockPort &= ~(1 << P_SCK);
    4076:	2a 98       	cbi	0x05, 2	; 5
 	ClockPort |= (1 << P_SCK);
    4078:	2a 9a       	sbi	0x05, 2	; 5
	ClockPort &= ~(1 << P_SCK);
    407a:	2a 98       	cbi	0x05, 2	; 5
							   SetLevelPins(0);
							   SetLevelPins(0);
							   SetLevelPins(15);
							   break;
						}
						i = i;	
    407c:	89 81       	ldd	r24, Y+1	; 0x01
    407e:	9a 81       	ldd	r25, Y+2	; 0x02
    4080:	9a 83       	std	Y+2, r25	; 0x02
    4082:	89 83       	std	Y+1, r24	; 0x01

}

void Latch()
{
	LatchPort &= ~(1 << P_RCK);
    4084:	5d 98       	cbi	0x0b, 5	; 11
	LatchPort |= (1 << P_RCK);
    4086:	5d 9a       	sbi	0x0b, 5	; 11
	LatchPort &= ~(1 << P_RCK);
    4088:	5d 98       	cbi	0x0b, 5	; 11
	LatchPort &= ~(1 << P_OE);
    408a:	5a 98       	cbi	0x0b, 2	; 11
					
					CARDloop();
					USARTloop();
					
					mux = MaxMux;
					while (mux > 0)
    408c:	89 85       	ldd	r24, Y+9	; 0x09
    408e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4090:	18 16       	cp	r1, r24
    4092:	19 06       	cpc	r1, r25
    4094:	0c f4       	brge	.+2      	; 0x4098 <main+0x2e2>
    4096:	59 cf       	rjmp	.-334    	; 0x3f4a <main+0x194>
    4098:	40 93 ec 01 	sts	0x01EC, r20
			while (Hold <= pgm_read_byte(&AnimationA[patterncntr].hold))
			{
				
				if (fademode > 0) fade();

				for (i=0; i<=PWMres; i++)
    409c:	89 81       	ldd	r24, Y+1	; 0x01
    409e:	9a 81       	ldd	r25, Y+2	; 0x02
    40a0:	01 96       	adiw	r24, 0x01	; 1
    40a2:	9a 83       	std	Y+2, r25	; 0x02
    40a4:	89 83       	std	Y+1, r24	; 0x01
    40a6:	89 81       	ldd	r24, Y+1	; 0x01
    40a8:	9a 81       	ldd	r25, Y+2	; 0x02
    40aa:	45 97       	sbiw	r24, 0x15	; 21
    40ac:	0c f4       	brge	.+2      	; 0x40b0 <main+0x2fa>
    40ae:	44 cf       	rjmp	.-376    	; 0x3f38 <main+0x182>
						}
						i = i;	
						Latch();
					}		
				}
			if (fademode == 0)	Hold++;	
    40b0:	80 91 00 01 	lds	r24, 0x0100
    40b4:	88 23       	and	r24, r24
    40b6:	29 f4       	brne	.+10     	; 0x40c2 <main+0x30c>
    40b8:	80 91 ae 02 	lds	r24, 0x02AE
    40bc:	8f 5f       	subi	r24, 0xFF	; 255
    40be:	80 93 ae 02 	sts	0x02AE, r24
				YEnd = pgm_read_byte(&AnimationA[idx].pwm[i]);
				dY[i] = YEnd-YStart;		 
			}
			Hold = 0;

			while (Hold <= pgm_read_byte(&AnimationA[patterncntr].hold))
    40c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    40c4:	9c 85       	ldd	r25, Y+12	; 0x0c
    40c6:	8e 9d       	mul	r24, r14
    40c8:	f0 01       	movw	r30, r0
    40ca:	8f 9d       	mul	r24, r15
    40cc:	f0 0d       	add	r31, r0
    40ce:	9e 9d       	mul	r25, r14
    40d0:	f0 0d       	add	r31, r0
    40d2:	11 24       	eor	r1, r1
    40d4:	e0 59       	subi	r30, 0x90	; 144
    40d6:	ff 4f       	sbci	r31, 0xFF	; 255
    40d8:	e4 91       	lpm	r30, Z+
    40da:	80 91 ae 02 	lds	r24, 0x02AE
    40de:	e8 17       	cp	r30, r24
    40e0:	08 f0       	brcs	.+2      	; 0x40e4 <main+0x32e>
    40e2:	21 cf       	rjmp	.-446    	; 0x3f26 <main+0x170>
						Latch();
					}		
				}
			if (fademode == 0)	Hold++;	
			} 
			Hold = 0;
    40e4:	10 92 ae 02 	sts	0x02AE, r1
			patterncntr++;	
    40e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    40ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    40ec:	01 96       	adiw	r24, 0x01	; 1
    40ee:	9c 87       	std	Y+12, r25	; 0x0c
    40f0:	8b 87       	std	Y+11, r24	; 0x0b
	USARTinit();

	while (1) 
	{
	
		while (patterncntr < numanimas)
    40f2:	2b 85       	ldd	r18, Y+11	; 0x0b
    40f4:	3c 85       	ldd	r19, Y+12	; 0x0c
    40f6:	80 91 01 01 	lds	r24, 0x0101
    40fa:	68 2f       	mov	r22, r24
    40fc:	70 e0       	ldi	r23, 0x00	; 0
    40fe:	26 17       	cp	r18, r22
    4100:	37 07       	cpc	r19, r23
    4102:	0c f4       	brge	.+2      	; 0x4106 <main+0x350>
    4104:	90 ce       	rjmp	.-736    	; 0x3e26 <main+0x70>
			if (fademode == 0)	Hold++;	
			} 
			Hold = 0;
			patterncntr++;	
		}
		patterncntr = 0;
    4106:	1c 86       	std	Y+12, r1	; 0x0c
    4108:	1b 86       	std	Y+11, r1	; 0x0b
    410a:	f3 cf       	rjmp	.-26     	; 0x40f2 <main+0x33c>

0000410c <CARDinit>:
uint8_t CARDstatus;

// init
void CARDinit()
{
	CARDstatus = 0;
    410c:	10 92 02 01 	sts	0x0102, r1
}
    4110:	08 95       	ret

00004112 <CARDloop>:

// loop
void CARDloop()
{
	switch (CARDstatus)
    4112:	80 91 02 01 	lds	r24, 0x0102
    4116:	81 30       	cpi	r24, 0x01	; 1
    4118:	39 f0       	breq	.+14     	; 0x4128 <CARDloop+0x16>
    411a:	81 30       	cpi	r24, 0x01	; 1
    411c:	18 f0       	brcs	.+6      	; 0x4124 <CARDloop+0x12>
    411e:	82 30       	cpi	r24, 0x02	; 2
    4120:	49 f4       	brne	.+18     	; 0x4134 <CARDloop+0x22>
    4122:	06 c0       	rjmp	.+12     	; 0x4130 <CARDloop+0x1e>
	{
		case 0:
			CARDstatus++;
    4124:	81 e0       	ldi	r24, 0x01	; 1
    4126:	01 c0       	rjmp	.+2      	; 0x412a <CARDloop+0x18>
			break;
		case 1:
			CARDstatus++;
    4128:	82 e0       	ldi	r24, 0x02	; 2
    412a:	80 93 02 01 	sts	0x0102, r24
    412e:	08 95       	ret
			break;
		case 2:
			CARDstatus = 0;
    4130:	10 92 02 01 	sts	0x0102, r1
    4134:	08 95       	ret

00004136 <USARTinit>:
int LoopCnt;

// 9600Baud
void USARTinit()
{
	UCSRB |= (1<<TXEN);  // UART TX einschalten
    4136:	e1 ec       	ldi	r30, 0xC1	; 193
    4138:	f0 e0       	ldi	r31, 0x00	; 0
    413a:	80 81       	ld	r24, Z
    413c:	88 60       	ori	r24, 0x08	; 8
    413e:	80 83       	st	Z, r24
    UCSRC = (1<<USBS0)|(3 << UCSZ00); // Asynchron 8N1     
    4140:	8e e0       	ldi	r24, 0x0E	; 14
    4142:	80 93 c2 00 	sts	0x00C2, r24
	UBRRH = UBRR_VAL >> 8;
    4146:	10 92 c5 00 	sts	0x00C5, r1
    UBRRL = UBRR_VAL & 0xFF;
    414a:	87 e6       	ldi	r24, 0x67	; 103
    414c:	80 93 c4 00 	sts	0x00C4, r24
	UCSRB |= ( 1 << RXEN );	// Receiver
    4150:	80 81       	ld	r24, Z
    4152:	80 61       	ori	r24, 0x10	; 16
    4154:	80 83       	st	Z, r24
	RXptr = 0;
    4156:	10 92 14 01 	sts	0x0114, r1
	RXcount = 0;
    415a:	10 92 28 01 	sts	0x0128, r1
	TXptr = 0;
    415e:	10 92 15 01 	sts	0x0115, r1
	USARTstatus = 0;
    4162:	10 92 03 01 	sts	0x0103, r1
}
    4166:	08 95       	ret

00004168 <USARTloop>:

// called every ca. 40us
void USARTloop()
{
	if (UCSRA & (1<<RXC)) 
    4168:	80 91 c0 00 	lds	r24, 0x00C0
    416c:	87 ff       	sbrs	r24, 7
    416e:	16 c0       	rjmp	.+44     	; 0x419c <USARTloop+0x34>
	{
		RXbuffer[RXptr] = UDR;
    4170:	90 91 14 01 	lds	r25, 0x0114
    4174:	80 91 c6 00 	lds	r24, 0x00C6
    4178:	e9 2f       	mov	r30, r25
    417a:	f0 e0       	ldi	r31, 0x00	; 0
    417c:	ea 5e       	subi	r30, 0xEA	; 234
    417e:	fe 4f       	sbci	r31, 0xFE	; 254
    4180:	80 83       	st	Z, r24
		if (RXptr < MaxRX -1) RXptr++; else RXptr = 0;
    4182:	9f 30       	cpi	r25, 0x0F	; 15
    4184:	20 f4       	brcc	.+8      	; 0x418e <USARTloop+0x26>
    4186:	9f 5f       	subi	r25, 0xFF	; 255
    4188:	90 93 14 01 	sts	0x0114, r25
    418c:	02 c0       	rjmp	.+4      	; 0x4192 <USARTloop+0x2a>
    418e:	10 92 14 01 	sts	0x0114, r1
		RXcount++;
    4192:	80 91 28 01 	lds	r24, 0x0128
    4196:	8f 5f       	subi	r24, 0xFF	; 255
    4198:	80 93 28 01 	sts	0x0128, r24
	}
	switch (USARTstatus) 
    419c:	80 91 03 01 	lds	r24, 0x0103
    41a0:	81 30       	cpi	r24, 0x01	; 1
    41a2:	59 f0       	breq	.+22     	; 0x41ba <USARTloop+0x52>
    41a4:	81 30       	cpi	r24, 0x01	; 1
    41a6:	18 f0       	brcs	.+6      	; 0x41ae <USARTloop+0x46>
    41a8:	82 30       	cpi	r24, 0x02	; 2
    41aa:	39 f5       	brne	.+78     	; 0x41fa <USARTloop+0x92>
    41ac:	24 c0       	rjmp	.+72     	; 0x41f6 <USARTloop+0x8e>
	{
		case 0:
			if (RXcount > 0)
    41ae:	80 91 28 01 	lds	r24, 0x0128
    41b2:	88 23       	and	r24, r24
    41b4:	11 f1       	breq	.+68     	; 0x41fa <USARTloop+0x92>
			{
				USARTstatus++;
    41b6:	81 e0       	ldi	r24, 0x01	; 1
    41b8:	1b c0       	rjmp	.+54     	; 0x41f0 <USARTloop+0x88>
			}
			break;
		case 1:
			if (UCSRA & (1<<UDRE))
    41ba:	80 91 c0 00 	lds	r24, 0x00C0
    41be:	85 ff       	sbrs	r24, 5
    41c0:	1c c0       	rjmp	.+56     	; 0x41fa <USARTloop+0x92>
			{
				UDR = RXbuffer[TXptr]; // send
    41c2:	90 91 15 01 	lds	r25, 0x0115
    41c6:	e9 2f       	mov	r30, r25
    41c8:	f0 e0       	ldi	r31, 0x00	; 0
    41ca:	ea 5e       	subi	r30, 0xEA	; 234
    41cc:	fe 4f       	sbci	r31, 0xFE	; 254
    41ce:	80 81       	ld	r24, Z
    41d0:	80 93 c6 00 	sts	0x00C6, r24
				if (TXptr < MaxRX -1) TXptr++; else TXptr = 0;
    41d4:	9f 30       	cpi	r25, 0x0F	; 15
    41d6:	20 f4       	brcc	.+8      	; 0x41e0 <USARTloop+0x78>
    41d8:	9f 5f       	subi	r25, 0xFF	; 255
    41da:	90 93 15 01 	sts	0x0115, r25
    41de:	02 c0       	rjmp	.+4      	; 0x41e4 <USARTloop+0x7c>
    41e0:	10 92 15 01 	sts	0x0115, r1
				RXcount--;
    41e4:	80 91 28 01 	lds	r24, 0x0128
    41e8:	81 50       	subi	r24, 0x01	; 1
    41ea:	80 93 28 01 	sts	0x0128, r24
				USARTstatus++;
    41ee:	82 e0       	ldi	r24, 0x02	; 2
    41f0:	80 93 03 01 	sts	0x0103, r24
    41f4:	02 c0       	rjmp	.+4      	; 0x41fa <USARTloop+0x92>
			}
			break;
		case 2:
			{
				USARTstatus = 0;
    41f6:	10 92 03 01 	sts	0x0103, r1
				break;
			}

	}

	LoopCnt++;
    41fa:	80 91 26 01 	lds	r24, 0x0126
    41fe:	90 91 27 01 	lds	r25, 0x0127
    4202:	01 96       	adiw	r24, 0x01	; 1
    4204:	90 93 27 01 	sts	0x0127, r25
    4208:	80 93 26 01 	sts	0x0126, r24
}
    420c:	08 95       	ret

0000420e <_exit>:
    420e:	f8 94       	cli

00004210 <__stop_program>:
    4210:	ff cf       	rjmp	.-2      	; 0x4210 <__stop_program>
